<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Models;

use ApiB4CLib\ApiHelper;
use stdClass;

class Marca1 implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $quantidade;

    /**
     * @param string $id
     * @param string $quantidade
     */
    public function __construct(string $id, string $quantidade)
    {
        $this->id = $id;
        $this->quantidade = $quantidade;
    }

    /**
     * Returns Id.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Quantidade.
     */
    public function getQuantidade(): string
    {
        return $this->quantidade;
    }

    /**
     * Sets Quantidade.
     *
     * @required
     * @maps quantidade
     */
    public function setQuantidade(string $quantidade): void
    {
        $this->quantidade = $quantidade;
    }

    /**
     * Converts the Marca1 object to a human-readable string representation.
     *
     * @return string The string representation of the Marca1 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('Marca1', ['id' => $this->id, 'quantidade' => $this->quantidade]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']         = $this->id;
        $json['quantidade'] = $this->quantidade;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
