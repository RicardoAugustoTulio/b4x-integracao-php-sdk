<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Controllers;

use ApiB4CLib\Exceptions\ApiException;
use ApiB4CLib\Models\AtualizarClienteRequest;
use ApiB4CLib\Models\CadastrarClienteRequest;
use Core\Request\Parameters\BodyParam;
use CoreInterfaces\Core\Request\RequestMethod;

class ClientesController extends BaseController
{
    /**
     * > /clientes/id?
     * cpf_cnpj={CPF_CNPJ}&data_inicial={DATA_INICIAL}&data_final={DATA_FINAL}&aceito_pj={ACEITE_TERMO}
     * &email={EMAIL}
     *
     * **Parametros GET**
     *
     * | Campos | Descriçao | **Tipo** |
     * | --- | --- | --- |
     * | cpf_cnpj | CPF ou CNPJ do cliente | string |
     * | data_inicial | data inicio de cadastro do cliente | datetime |
     * | data_final | data final de cadastro do cliente | datetime |
     * | aceito_pj | clientes que aceitaram o termo de PJ | boolean |
     * | email | Email do cliente | string |
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listaClientes(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/clientes')->auth('basic');

        $this->execute($_reqBuilder);
    }

    /**
     * ###Adicionar Cliente
     *
     * _`#POST /clientes`_
     *
     * **Requisição**
     *
     * \*Body
     *
     * | nome | descricao | tipo | obrigatorio |
     * | --- | --- | --- | --- |
     * | nome | nome do cliente | string | sim |
     * | cpf_cnpj | Cpf/Cnpj do cliente | string | sim |
     * | email | E-mail do cliente | string | sim |
     * | data_nascimento | Data de nascimento do cliente, no formato Y-m-d | string | sim |
     * | telefone | Telefone do cliente | string | sim |
     * | tipo | Tipo do cliente(Pf(1) ou Pj(2)) | string | não(padrão 1) |
     * | rg_ie | Rg/Ie do cliente | string | não |
     * | contribuinte_icms | Flag contribuinte icms(1 ou 0) | string | não(padrão 0) |
     * | revenda_ferramentas | Flag revenda ferramentas(1 ou 0) | string | não(padrão 0) |
     * | celular | Celular do cliente | string | não |
     * | receber_emails | Flag para receber emails/newsletter(1 ou 0) | string | não(padrão 0) |
     *
     * \*_\\_Exemplo
     *
     * ``` json
     * {
     * "nome": "cliente teste api",
     * "cpf_cnpj": "74637522080",
     * "email": "teste@email.com",
     * "data_nascimento": "2005-10-29",
     * "telefone": "41996695000",
     * "tipo": "1",
     * "rg_ie": "1234",
     * "contribuinte_icms": "0",
     * "revenda_ferramentas": "0",
     * "celular": "123",
     * "receber_emails": "1"
     * }
     *
     *
     * ```
     *
     * **Resposta
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 201 | cliente cadastrado com sucesso, id do cliente | mensagem | {"cliente cadastrado com sucesso -
     * ID: (cliente id)"} |
     * | 4xx | Requisição inválida | mensagem | {"o cliente já está cadastrado"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](mailto:suporte@b4commerce.com.br)"} |
     *
     * @param CadastrarClienteRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastrarCliente(CadastrarClienteRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/clientes')->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * ###Atualizar Cliente
     *
     * _`#PUT /clientes/{id}`_
     *
     * **Requisição**
     *
     * \*Body
     * \*Parâmetros da url
     *
     * | nome | descricao | tipo |
     * | --- | --- | --- |
     * | nome | nome do cliente | string |
     * | cpf_cnpj | Cpf/Cnpj do cliente | string |
     * | email | E-mail do cliente | string |
     * | data_nascimento | Data de nascimento do cliente, no formato Y-m-d | string |
     * | telefone | Telefone do cliente | string |
     * | tipo | Tipo do cliente(Pf(1) ou Pj(2)) | string |
     * | rg_ie | Rg/Ie do cliente | string |
     * | contribuinte_icms | Flag contribuinte icms(1 ou 0) | string |
     * | revenda_ferramentas | Flag revenda ferramentas(1 ou 0) | string |
     * | celular | Celular do cliente | string |
     * | receber_emails | Flag para receber emails/newsletter(1 ou 0) | string |
     *
     * \*_\\_Exemplo
     *
     * ``` json
     * {
     * "nome": "cliente update api",
     * "cpf_cnpj": "74637522080",
     * "email": "teste@email.com",
     * "data_nascimento": "2005-10-29",
     * "telefone": "41996695000",
     * "tipo": "1",
     * "rg_ie": "1234",
     * "contribuinte_icms": "0",
     * "revenda_ferramentas": "0",
     * "celular": "123",
     * "receber_emails": "1"
     * }
     *
     * ```
     *
     * **Resposta
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 201 | cliente atualizado com sucesso | mensagem | {"cliente atualizado com sucesso"} |
     * | 4xx | Requisição inválida | mensagem | {"Cliente não encontrado"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](mailto:suporte@b4commerce.com.br)"} |
     *
     * @param AtualizarClienteRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizarCliente(AtualizarClienteRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/clientes/123456')
            ->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * ### Remover Cliente
     *
     * _`#DELETE /clientes/{id}`_
     *
     * \*_Requisição
     * \*_Parâmetros da Url
     *
     * | Nome | Descrição | Tipo | Obrigatório |
     * | --- | --- | --- | --- |
     * | codigo | código do cliente | string | Sim |
     *
     * \*Body
     * N/A
     *
     * _Resposta_
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 200 | Cliente removido com Sucesso | mensagem | {"Cliente removido com sucesso"} |
     * | 4xx | Requisição inválida | mensagem | {"Cliente nao encontrado"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](mailto:suporte@b4commerce.com.br) "} |
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function excluirCliente(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/clientes/123456');

        $this->execute($_reqBuilder);
    }
}
