<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Controllers;

use ApiB4CLib\Exceptions\ApiException;
use ApiB4CLib\Models\AtualizaQuantidadeRequest;
use ApiB4CLib\Models\CadastraBrindesRequest;
use ApiB4CLib\Models\ConsultaQuantidade;
use ApiB4CLib\Models\DeletarBrindes;
use ApiB4CLib\Models\DeletarBrindesRequest;
use ApiB4CLib\Models\NewRequest;
use Core\Request\Parameters\BodyParam;
use CoreInterfaces\Core\Request\RequestMethod;

class QuantidadeController extends BaseController
{
    /**
     * @return ConsultaQuantidade Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function consultaQuantidade(): ConsultaQuantidade
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/brindes/quantidade/7');

        $_resHandler = $this->responseHandler()->type(ConsultaQuantidade::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * # atualizar regra de quantidade e valor
     *
     * ** /brindes/quantidade/{codigo_da_oferta}**
     *
     * | **nome** | **descrição** | **tipo** | **obrigatório** |
     * | --- | --- | --- | --- |
     * | valor_total_carrinho | valor em itens que o cliente deve ter no carrinho | string | nao |
     * | quantidade_total_carrinho | quantidade de items que o cliente deve ter no carrinho | string | nao
     * |
     *
     * @param AtualizaQuantidadeRequest $body
     *
     * @return NewRequest Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizaQuantidade(AtualizaQuantidadeRequest $body): NewRequest
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/brindes/quantidade/7')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(NewRequest::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * # Cadastro de brindes
     *
     * ** /brindes/quantidade/{codigo_da_oferta}**
     *
     * | **nome** | **descricao** | **tipo** | **obrigatório** |
     * | --- | --- | --- | --- |
     * | brindes | array com os produtos a serem adicionados de brinde | array | nao |
     * | brindes.sku | código do produto | string | sim |
     *
     * @param CadastraBrindesRequest $body
     *
     * @return NewRequest Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastraBrindes(CadastraBrindesRequest $body): NewRequest
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/brindes/quantidade/7')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(NewRequest::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * # Deletar brindes
     *
     * ** /brindes/quantidade/{codigo_da_oferta}**
     *
     * | **nome** | **descricao** | **tipo** | **obrigatório** |
     * | --- | --- | --- | --- |
     * | brindes | array de brindes a ser deletado | array | nao |
     * | brindes.sku | código do produto | string | sim |
     *
     * @param DeletarBrindesRequest $body
     *
     * @return DeletarBrindes Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deletarBrindes(DeletarBrindesRequest $body): DeletarBrindes
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/brindes/quantidade/7')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(DeletarBrindes::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
