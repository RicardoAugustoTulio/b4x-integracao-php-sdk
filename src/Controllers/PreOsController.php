<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Controllers;

use ApiB4CLib\Exceptions\ApiException;
use ApiB4CLib\Exceptions\CadastraPrecoException;
use ApiB4CLib\Exceptions\DeletarPrecoException;
use ApiB4CLib\Models\CadastraPreco1;
use ApiB4CLib\Models\CadastraPrecoRequest;
use ApiB4CLib\Models\ConsultaPreco;
use ApiB4CLib\Models\DeletarPrecoRequest;
use Core\Request\Parameters\BodyParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;

class PreOsController extends BaseController
{
    /**
     * ```json
     * [
     * {
     * "id_oferta": 18724734,
     * "status_campanha_oferta": 1,
     * "campanha_oferta": 1,
     * "agrupamento_campanha_oferta": 0,
     * "tipo_oferta_desconto": 3,
     * "valor_oferta": 19.99,
     * "produto_oferta_desconto": 23,
     * "prioridade_atualizacao_oferta": "nao",
     * "created_at": null,
     * "updated_at": "2019-02-26 13:44:43",
     * "regra_ativacao_valor": 0,
     * "preco_atacado": null
     * },
     * {
     * "id_oferta": 19078292,
     * "status_campanha_oferta": 1,
     * "campanha_oferta": 149,
     * "agrupamento_campanha_oferta": 0,
     * "tipo_oferta_desconto": 3,
     * "valor_oferta": 18.62,
     * "produto_oferta_desconto": 23,
     * "prioridade_atualizacao_oferta": "nao",
     * "created_at": null,
     * "updated_at": "0000-00-00 00:00:00",
     * "regra_ativacao_valor": 0,
     * "preco_atacado": null
     * },
     * {
     * "id_oferta": 18782023,
     * "status_campanha_oferta": 1,
     * "campanha_oferta": 164,
     * "agrupamento_campanha_oferta": 0,
     * "tipo_oferta_desconto": 3,
     * "valor_oferta": 17.88,
     * "produto_oferta_desconto": 23,
     * "prioridade_atualizacao_oferta": "nao",
     * "created_at": null,
     * "updated_at": "0000-00-00 00:00:00",
     * "regra_ativacao_valor": 0,
     * "preco_atacado": null
     * },
     * {
     * "id_oferta": 24418127,
     * "status_campanha_oferta": 1,
     * "campanha_oferta": 594,
     * "agrupamento_campanha_oferta": null,
     * "tipo_oferta_desconto": 3,
     * "valor_oferta": 16.46,
     * "produto_oferta_desconto": 23,
     * "prioridade_atualizacao_oferta": null,
     * "created_at": null,
     * "updated_at": null,
     * "regra_ativacao_valor": 0,
     * "preco_atacado": null
     * },
     * {
     * "id_oferta": 24408264,
     * "status_campanha_oferta": 1,
     * "campanha_oferta": 596,
     * "agrupamento_campanha_oferta": null,
     * "tipo_oferta_desconto": 3,
     * "valor_oferta": 16.46,
     * "produto_oferta_desconto": 23,
     * "prioridade_atualizacao_oferta": null,
     * "created_at": null,
     * "updated_at": null,
     * "regra_ativacao_valor": 0,
     * "preco_atacado": null
     * },
     * {
     * "id_oferta": 25092310,
     * "status_campanha_oferta": 1,
     * "campanha_oferta": 2000,
     * "agrupamento_campanha_oferta": 0,
     * "tipo_oferta_desconto": 0,
     * "valor_oferta": 180,
     * "produto_oferta_desconto": 23,
     * "prioridade_atualizacao_oferta": 1,
     * "created_at": "2020-09-02 16:02:40",
     * "updated_at": "2020-09-02 16:05:55",
     * "regra_ativacao_valor": 1,
     * "preco_atacado": null
     * }
     * ]
     * ```
     *
     * @return ConsultaPreco[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function consultaPreco(): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/preco/produto/50392');

        $_resHandler = $this->responseHandler()->type(ConsultaPreco::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param CadastraPrecoRequest $body
     *
     * @return CadastraPreco1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastraPreco(CadastraPrecoRequest $body): CadastraPreco1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/preco/produto/50392')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Bad Request', CadastraPrecoException::class))
            ->type(CadastraPreco1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param DeletarPrecoRequest $body
     *
     * @return CadastraPreco1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deletarPreco(DeletarPrecoRequest $body): CadastraPreco1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/preco/produto/50392')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Bad Request', DeletarPrecoException::class))
            ->type(CadastraPreco1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
