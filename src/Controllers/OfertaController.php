<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Controllers;

use ApiB4CLib\Exceptions\ApiException;
use ApiB4CLib\Models\AtualizarOferta;
use ApiB4CLib\Models\AtualizarOfertaRequest;
use ApiB4CLib\Models\CadastraOferta;
use ApiB4CLib\Models\CadastraOfertaRequest;
use ApiB4CLib\Models\ConsultaOferta;
use ApiB4CLib\Models\InativarOferta;
use Core\Request\Parameters\BodyParam;
use CoreInterfaces\Core\Request\RequestMethod;

class OfertaController extends BaseController
{
    /**
     * # Tabela base para controlar a quantidade de brindes e com esse ID que sera vinculado os produtos e
     * brindes
     *
     * | nome | descricao | tipo | obrigatorio |
     * |------|-----------|------|----------|
     * | id_campanha_brindes | codigo da campanha cadastrada com os vencimentos | int | sim |
     * | id_oferta | codigo da oferta |  int | sim |
     * | nomeBrinde | nome para controle interno  | string | sim |
     * | qtdeBrindes | quantidade máxima de brindes que o cliente vai poder escolher | integer | sim |
     *
     * @param CadastraOfertaRequest $body
     *
     * @return CadastraOferta Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastraOferta(CadastraOfertaRequest $body): CadastraOferta
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/brindes/oferta')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(CadastraOferta::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return ConsultaOferta Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function consultaOferta(): ConsultaOferta
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/brindes/oferta/1');

        $_resHandler = $this->responseHandler()->type(ConsultaOferta::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return InativarOferta Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function inativarOferta(): InativarOferta
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/brindes/oferta/30');

        $_resHandler = $this->responseHandler()->type(InativarOferta::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * | nome | descricao | tipo | obrigatorio |
     * |------|-----------|------|----------|
     * | nomeBrinde | nome para controle interno  | string | nao |
     * | qtdeBrindes | quantidade máxima de brindes que o cliente vai poder escolher | int | nao |
     * | status_brindes_oferta | status da oferta. 0 = inativa, 1 = ativa | int | nao |
     *
     * @param AtualizarOfertaRequest $body
     *
     * @return AtualizarOferta Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizarOferta(AtualizarOfertaRequest $body): AtualizarOferta
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/brindes/oferta/30')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(AtualizarOferta::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
