<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Controllers;

use ApiB4CLib\Exceptions\ApiException;
use ApiB4CLib\Models\EnviaEventosDaEntregaRequest;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;

class EventosDaEntregaController extends BaseController
{
    /**
     * `POST /pedidos/{codigo_pedido}/entregas/{codigo_entrega}/eventos/`
     *
     * Adiciona uma novo evento a entrega
     *
     * Parâmetros da Url
     *
     * `POST /pedidos/{codigo_pedido}/entregas/{codigo_entrega}/notas_fiscais/`
     *
     * | Nome | Descrição | Tipo | Obrigatório |
     * | --- | --- | --- | --- |
     * | codigo_pedido | codigo do pedido no lojista | int | Sim |
     * | codigo_entrega | codigo da entrega | int | Sim |
     *
     * _body_
     *
     * | nome | descricao | tipo | Obrigatório |
     * | --- | --- | --- | --- |
     * | status | situacao da entrega | string | sim |
     * | data | data do acontecimento | datetime | nao |
     *
     * _Exemplo_
     *
     * ``` json
     * {
     * "status": "separacao",
     * "data": "2022-08-24 23:52:23"
     * }
     *
     * ```
     *
     * _Resposta_
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 201 | Evento cadastrado Sucesso | mensagem | {"evento cadastrado com sucesso"} |
     * | 4xx | Requisição inválida | mensagem | {"entregao não encontrada"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](https://mailto:suporte@b4commerce.com.br) "} |
     *
     * @param EnviaEventosDaEntregaRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function enviaEventosDaEntrega(EnviaEventosDaEntregaRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/pedidos/350589/entregas/587055/eventos')
            ->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * Lista os eventos cadastrados da Entrega
     *
     * **`GET /pedidos/{codigo_pedido}/entregas/{codigo_entrega}/eventos/`**
     *
     * Retorna todas as notas cadastradas no pedido
     *
     * *Parâmetros da Url*
     *
     * | Nome | Descrição | Tipo  | Obrigatório|
     * |------------|---------|---------------|-----------------|
     * | codigo_pedido | codigo do pedido no lojista | int | Sim |
     * | codigo_entrega | codigo da entrega | int | Sim |
     *
     * *Resposta*
     *
     * | nome | descricao | tipo |
     * |------|-----------|------|
     * | data | data da inclusão na NF | Datetime |
     * | status | código do status | int |
     * | descricap | descrição do status | string |
     *
     *
     * *Output*
     *
     * ```json
     * {
     * "eventos": [
     * {
     * "data": "2020-02-13 14:19:34",
     * "status": "4",
     * "descricao": "Na Separação"
     * },
     * {
     * "data": "2020-02-13 14:59:34",
     * "status": "13",
     * "descricao": "Nota Fiscal Emitida"
     * }
     * ]
     * }
     * ````
     *
     * @param string $codigoPedido
     * @param string $codigoEntrega
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listaOsEventosDaEntrega(string $codigoPedido, string $codigoEntrega): void
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/pedidos/{codigo_pedido}/entregas/{codigo_entrega}/eventos'
        )
            ->parameters(
                TemplateParam::init('codigo_pedido', $codigoPedido),
                TemplateParam::init('codigo_entrega', $codigoEntrega)
            );

        $this->execute($_reqBuilder);
    }
}
