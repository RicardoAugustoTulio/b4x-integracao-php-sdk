<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Controllers;

use ApiB4CLib\Exceptions\ApiException;
use ApiB4CLib\Models\AtualizarCategoriaRequest;
use ApiB4CLib\Models\CadastraCategoriasRequest;
use ApiB4CLib\Models\CadastrarCategoriaRequest;
use ApiB4CLib\Models\ConsultaCategorias;
use ApiB4CLib\Models\DeletarCategoriasRequest;
use ApiB4CLib\Models\NewRequest;
use Core\Request\Parameters\BodyParam;
use CoreInterfaces\Core\Request\RequestMethod;

class CategoriasController extends BaseController
{
    /**
     * ###Adicionar categoria
     *
     * *`#POST /categoria`*
     *
     * **Requisição**
     *
     *
     * *Body
     *
     * | nome | descricao | tipo | obrigatorio |
     * |------|-----------|------|----------|
     * | codigo | codigo da categoria | string | sim |
     * | descricao | nome da categoria |  string | sim |
     * | codigo_pai |  código  da categoria  pai  | string | sim |
     *
     * ***Exemplo
     *
     * ```json
     * {
     * "codigo":"1",
     * "descricao":"Categoria Teste",
     * "codigo_pai": "99"
     * }
     * ````
     *
     *
     * **Resposta
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * |------|-----------|----------|------------- |
     * | 201| categoria cadastrada com sucesso | mensagem | {"categoria cadastrada com sucesso"}|
     * | 4xx | Requisição inválida | mensagem | {"a categoria já está cadastrada"} |
     * | 500 | Erro desconhecido.  | mensagem | {"erro deconhecido contate o suporte: suporte@b4commerce.
     * com.br"} |
     *
     * @param CadastrarCategoriaRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastrarCategoria(CadastrarCategoriaRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/categoria')->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * ###Alterar Categoria
     * *`#PUT /categoria/{codigo}`*
     *
     * *Requisição
     *
     * Parâmetros da Url
     *
     * | Nome | Descrição | Tipo  | Obrigatório|
     * |------------|---------|--------------|------------------|
     * | codigo | código da categoria | string | Sim |
     *
     *
     * *Body*
     *
     *
     * | nome | descricao | tipo |
     * |------|-----------|------|
     * | descricao | nome da categoria |  string |
     * | codigo_pai | código  do categoria  pai | string |
     *
     * *Exemplo*
     *
     * ```json
     *
     * {
     * "descricao":"Categoria Teste Alterada",
     * "codigo_pai": "99"
     * }
     * ````
     * *Resposta*
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * |------|-----------|----------|------------- |
     * | 200 | categoria alterada com Sucesso | mensagem | {"categoria atualizada com sucesso"}|
     * | 4xx | Requisição inválida | mensagem | {"categoria nao encontrada"}|
     * | 500 | Erro desconhecido.  | mensagem | {"erro deconhecido contate o suporte: suporte@b4commerce.
     * com.br "} |
     *
     * @param AtualizarCategoriaRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizarCategoria(AtualizarCategoriaRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/categoria/15')->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * ### Remover Categoria
     * >Não é possível excluir categorias com filhos e /ou vinculadas a produtos
     *
     * *`#DELETE/categoria/{codigo}`*
     *
     * **Requisição
     * **Parâmetros da Url
     *
     * | Nome | Descrição | Tipo  | Obrigatório|
     * |------------|---------|---------------|----------------|
     * | codigo | código da categoria  | string | Sim |
     *
     *
     * *Body
     * N/A
     *
     * *Resposta*
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * |------|-----------|----------|------------- |
     * | 200 | Categoria removida com Sucesso | mensagem | {"Categoria atualizada com sucesso"}|
     * | 4xx | Requisição inválida | mensagem | {"Categoria nao encontrada"}|
     * | 500 | Erro desconhecido.  | mensagem | {"erro deconhecido contate o suporte: suporte@b4commerce.
     * com.br "} |
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function excluirCategoria(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/categoria/16');

        $this->execute($_reqBuilder);
    }

    /**
     * *`GET /categoria/?offest={Offest}&Limit={Limit}`*
     *
     * **Retorna todas as categorias do fornecedor
     * **Requisição
     * **Parâmetros da Url
     *
     * | Nome | Descrição | Tipo  | Inf Adicional |
     * |------------|---------|---------------|-----------------|
     * | Offset | Ignora os primeiros { Offset } itens | Integer | |
     * | Limit | Define a quantidade de registros | Integer | 200 registros |
     *
     * **Requisição
     * **Parâmetros da Url
     * *`#GET /categoria/{codigo}`*
     * **Retorna informações sobre um produto cadastrado
     *
     * | Nome | Descrição | Tipo  | Obrigatório|
     * |------------|---------|----------------|----------------|
     * | codigo | código da categoria do fornecedor | string | Sim |
     *
     * *Resposta*
     *
     * | nome | descricao | tipo |
     * |------|-----------|------|
     * | codigo | codigo da categoria | string |
     * | nome | nome da categoria |  string |
     * | codigo_pai | código  da categoria  pai | string |
     *
     * *Output*
     *
     * ```json
     * {
     * "categorias": [{
     * "codigo_pai": "999",
     * "codigo":"1",
     * "descricao":"Categoria Teste"
     *
     * }]
     * }
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listarACategoriasCadastradas(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/categoria/16');

        $this->execute($_reqBuilder);
    }

    /**
     * @return ConsultaCategorias Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function consultaCategorias(): ConsultaCategorias
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/brindes/categorias/6');

        $_resHandler = $this->responseHandler()->type(ConsultaCategorias::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * # Cadastro de categorias e seus brindes - será vinculado as ofertas
     *
     * ** /brindes/categorias/{codigo_da_oferta}**
     *
     * | nome | descrição | **tipo** | **obrigatório** |
     * | --- | --- | --- | --- |
     * | tipo | tipo de regra a ser considerada no brinde | int | sim |
     * | valorTotal | valor total do carrinho caso o tipo seja igual a 1 | string | obrigatório caso o tipo
     * seja igual a 1  <br> |
     * | categorias | array das categorias a serem adicionadas | array | sim |
     * | categorias.id | código da categoria | string | sim |
     * | categorias.quantidade | quantidade para regra da categoria, caso o tipo seja 1 a quantidade é
     * desconsiderada | string | sim |
     * | brindes | array com os produtos a serem adicionados de brinde | array | nao |
     * | brindes.sku | codigo do produto | string | sim |
     *
     * @param CadastraCategoriasRequest $body
     *
     * @return NewRequest Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastraCategorias(CadastraCategoriasRequest $body): NewRequest
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/brindes/categorias/6')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(NewRequest::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * # Deletar categorias e seus brindes
     *
     * ** /brindes/categorias/{codigo_da_oferta}**
     *
     * | **nome** | **descrição** | **tipo** | **obrigatório** |
     * | --- | --- | --- | --- |
     * | categorias | array de categorias a ser deletado | array | nao |
     * | categorias.id | código da categoria | string | sim |
     * | brindes | array de brindes a ser deletado | array | nao |
     * | brindes.sku | código do produtos | string | sim |
     *
     * @param DeletarCategoriasRequest $body
     *
     * @return NewRequest Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deletarCategorias(DeletarCategoriasRequest $body): NewRequest
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/brindes/categorias/6')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(NewRequest::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
