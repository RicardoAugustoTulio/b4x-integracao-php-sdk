<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Controllers;

use ApiB4CLib\Exceptions\ApiException;
use ApiB4CLib\Exceptions\CadastraCampanhaException;
use ApiB4CLib\Exceptions\ConsultaCampanha1Exception;
use ApiB4CLib\Models\AtualizarCampanha;
use ApiB4CLib\Models\AtualizarCampanhaRequest;
use ApiB4CLib\Models\AtualizarCampanhaRequest1;
use ApiB4CLib\Models\AtualizarCampanhaRequest2;
use ApiB4CLib\Models\AtualizarCampanhaRequest3;
use ApiB4CLib\Models\CadastraCampanha1;
use ApiB4CLib\Models\CadastraCampanhaRequest;
use ApiB4CLib\Models\CadastraCampanhaRequest1;
use ApiB4CLib\Models\CadastraCampanhaRequest2;
use ApiB4CLib\Models\CadastraCampanhaRequest3;
use ApiB4CLib\Models\ConsultaCampanha;
use ApiB4CLib\Models\ConsultaCampanha3;
use ApiB4CLib\Models\ConsultaCampanha4;
use ApiB4CLib\Models\InativarCampanha;
use Core\Request\Parameters\BodyParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;

class CampanhaController extends BaseController
{
    /**
     * @param CadastraCampanhaRequest $body
     *
     * @return CadastraCampanha1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastraCampanha(CadastraCampanhaRequest $body): CadastraCampanha1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/campanha')->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('409', ErrorType::init('Bad Request', CadastraCampanhaException::class))
            ->type(CadastraCampanha1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * ```json
     * {
     * "id_campanha_promocional": "2000",
     * "status_campanha_promocional": "0",
     * "nome_campanha_promocional": "Campanha Teste CAD API - ALTERACAO",
     * "tipo_campanha_promocional": null,
     * "inicio_campanha_promocional": "2020-01-01 12:34:00",
     * "fim_campanha_promocional": "2099-10-25 12:34:00",
     * "logo_campanha_promocional": null,
     * "banner_campanha_promocional": null,
     * "obs_campanha_promocional": null,
     * "identificador_campanha_promocional": null,
     * "priorididade_campanha_promocional": "-500",
     * "campanha_vitrine": null,
     * "campanha_place": null,
     * "campanha_utms": null,
     * "seo_campanha": null,
     * "bloquear_place_campanha": null,
     * "bloquear_busca_campanha": null,
     * "bloquear_erp_campanha": null,
     * "created_at": "2020-09-02 13:57:12",
     * "updated_at": "2020-09-02 16:25:06",
     * "gerar_link": "0",
     * "regra_ativacao": "0",
     * "dias_semana": "",
     * "inicio_periodo": "00:00:00",
     * "fim_periodo": "00:00:00",
     * "temporizador": "0",
     * "title": null,
     * "meta_description": null,
     * "padrao_etiquetas": "0",
     * "url_fixa": ""
     * }
     * ```
     *
     * @return ConsultaCampanha Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function consultaCampanha(): ConsultaCampanha
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/campanha/2000');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Bad Request', ConsultaCampanha1Exception::class))
            ->type(ConsultaCampanha::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return InativarCampanha Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function inativarCampanha(): InativarCampanha
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/campanha/2000');

        $_resHandler = $this->responseHandler()->type(InativarCampanha::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param AtualizarCampanhaRequest $body
     *
     * @return AtualizarCampanha Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizarCampanha(AtualizarCampanhaRequest $body): AtualizarCampanha
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/campanha/2000')->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(AtualizarCampanha::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * # Tabela base para controlar os vencimentos das campanhas
     *
     * | nome | descricao | tipo | obrigatorio |
     * |------|-----------|------|----------|
     * | id_campanha_brindes | codigo da campanha | string | sim |
     * | nome_campanha_brindes | nome da campanha para controle interno |  string | sim |
     * | inicio_campanha_brindes |  data de inicio da campanha  | datetime | sim |
     * | fim_campanha_brindes |  data de vencimento da campanha  | datetime | sim |
     *
     * @param CadastraCampanhaRequest1 $body
     *
     * @return CadastraCampanha1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastraCampanha1(CadastraCampanhaRequest1 $body): CadastraCampanha1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/brindes')->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(CadastraCampanha1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return ConsultaCampanha3 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function consultaCampanha1(): ConsultaCampanha3
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/brindes/20');

        $_resHandler = $this->responseHandler()->type(ConsultaCampanha3::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function inativarCampanha1(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/brindes/20');

        $this->execute($_reqBuilder);
    }

    /**
     * | nome | descricao | tipo | obrigatorio |
     * |------|-----------|------|----------|
     * | nome_campanha_brindes | nome da campanha para controle interno |  string | nao |
     * | inicio_campanha_brindes |  data de inicio da campanha  | datetime | nao |
     * | fim_campanha_brindes |  data de vencimento da campanha  | datetime | nao |
     * | priorididade_campanha_brindes |  prioridade da campanha  | int | nao |
     * | status_campanha_brindes | status da campanha. 0 = inativa 1 = ativa| int | nao |
     *
     * @param AtualizarCampanhaRequest1 $body
     *
     * @return AtualizarCampanha Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizarCampanha1(AtualizarCampanhaRequest1 $body): AtualizarCampanha
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/brindes/20')->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(AtualizarCampanha::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * ###Adicionar Campanha Leve mais por menos
     *
     * _`#POST /leve-mais-por-menos`_
     *
     * **Requisição**
     *
     * \*Body
     *
     * | nome | descricao | tipo | obrigatorio |
     * | --- | --- | --- | --- |
     * | id_campanha_levemais | codigo identificador da campanha | int | sim |
     * | nome_campanha_levemais | nome para identificação da campanha | string | sim |
     * | inicio_campanha_levemais | data e hora do inicio da campanha | string | sim |
     * | fim_campanha_levemais | data e hora do término da campanha | string | sim |
     * | prioridade_campanha_levemais | prioridade da campanha em relação as demais | int | nao |
     * | comprando_produtos | quantidade necessária do produto para ativar a promoção | int | sim |
     * | numero_produtos_beneficio | número de unidades do produto que receberá o desconto | int | sim |
     * | percentual_desconto | desconto que será aplicado aos produtos. Enviar 100 para item grátis | float
     * | sim |
     * | status_campanha_levemais | status da campanha  <br>0 = inativo  <br>1 = ativo | int | sim |
     *
     * \*_\\_Exemplo
     *
     * ``` json
     * {
     * "id_campanha_levemais": "20",
     * "nome_campanha_levemais": "Pague 2 leve 3",
     * "inicio_campanha_levemais": "2017-10-24 12:34:00",
     * "fim_campanha_levemais": "2099-10-25 12:34:00",
     * "prioridade_campanha_levemais": 10,
     * "comprando_produtos": 2,
     * "numero_produtos_beneficio": 1,
     * "percentual_desconto": 100,
     * "status_campanha_levemais": 1
     * }
     *
     * ```
     *
     * **Resposta
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 201 | camp cadastrada com sucesso | mensagem | {"campanha cadastrada com sucesso"} |
     * | 4xx | Requisição inválida | mensagem | {"a campanha já está cadastrada"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](mailto:suporte@b4commerce.com.br)"} |
     *
     * @param CadastraCampanhaRequest2 $body
     *
     * @return CadastraCampanha1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastraCampanha2(CadastraCampanhaRequest2 $body): CadastraCampanha1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/leve-mais-por-menos')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(CadastraCampanha1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * ###Listar Campanha Leve mais por menos
     * *`GET /leve-mais-por-menos/?={Offest}&Limit={Limit}`*
     *
     * **Retorna todas as campanhas ativas
     * **Requisição
     * **Parâmetros da Url
     *
     * | Nome | Descrição | Tipo  | Inf Adicional |
     * |------------|---------|----------------|----------------|
     * | Offset | Ignora os primeiros { Offset } itens | Integer | |
     * | Limit | Define a quantidade de registros | Integer | 50 registros |
     *
     * **Requisição
     * **Parâmetros da Url
     * *`#GET /leve-mais-por-menos/{id}`*
     * **Retorna informações sobre uma campanha cadastrada
     *
     *
     * | Nome | Descrição | Tipo  | Obrigatório|
     * |------------|---------|------------------|--------------|
     * | id | código identificador da campanha | int | Sim |
     *
     * *Resposta*
     *
     * | nome | descricao | tipo | obrigatorio |
     * |------|-----------|------|----------|
     * | id_campanha_levemais | codigo identificador da campanha | int | sim |
     * | nome_campanha_levemais | nome para identificação da campanha |  string | sim |
     * | inicio_campanha_levemais | data e hora do inicio da campanha |  string | sim |
     * | fim_campanha_levemais | data e hora do término da campanha |  string | sim |
     * | prioridade_campanha_levemais | prioridade da campanha em relação as demais |  int | nao |
     * | comprando_produtos | quantidade necessária do produto para ativar a promoção |  int | sim |
     * | numero_produtos_beneficio | número de unidades do produto que receberá o desconto |  int | sim |
     * | percentual_desconto | desconto que será aplicado aos produtos. Enviar 100 para item grátis |
     * float | sim |
     *
     * *Output*
     *
     * ```json
     *
     * {
     * "id_campanha_levemais": "20",
     * "nome_campanha_levemais": "Pague 2 leve 3",
     * "inicio_campanha_levemais": "2017-10-24 12:34:00",
     * "fim_campanha_levemais": "2099-10-25 12:34:00",
     * "prioridade_campanha_levemais": 10,
     * "comprando_produtos":2,
     * "numero_produtos_beneficio":1,
     * "percentual_desconto":100
     *
     * }
     * ````
     *
     * **Resposta
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * |------|-----------|----------|------------- |
     * | 404 | Campanha não encontrada| mensagem | {"a campanha não foi encontrada"} |
     * | 500 | Erro desconhecido.  | mensagem | {"erro deconhecido contate o suporte: suporte@b4commerce.
     * com.br"} |
     *
     * @return ConsultaCampanha4[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function consultaCampanha2(): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/leve-mais-por-menos/20');

        $_resHandler = $this->responseHandler()->type(ConsultaCampanha4::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function inativarCampanha2(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/leve-mais-por-menos/20');

        $this->execute($_reqBuilder);
    }

    /**
     * ###Atualizar Campanha Leve mais por menos
     *
     * _`#PUT /leve-mais-por-menos/{id}`_
     *
     * **Requisição**
     * Parâmetros da Url
     *
     * | Nome | Descrição | Tipo | Obrigatório |
     * | --- | --- | --- | --- |
     * | id | codigo identificador da campanha | int | Sim |
     *
     * _Body_
     *
     * | nome | descricao | tipo | obrigatorio |
     * | --- | --- | --- | --- |
     * | nome_campanha_levemais | nome para identificação da campanha | string | sim |
     * | inicio_campanha_levemais | data e hora do inicio da campanha | string | sim |
     * | fim_campanha_levemais | data e hora do término da campanha | string | sim |
     * | prioridade_campanha_levemais | prioridade da campanha em relação as demais | int | nao |
     * | comprando_produtos | quantidade necessária do produto para ativar a promoção | int | sim |
     * | numero_produtos_beneficio | número de unidades do produto que receberá o desconto | int | sim |
     * | percentual_desconto | desconto que será aplicado aos produtos. Enviar 100 para item grátis | float
     * | sim |
     * | status_campanha_levemais | status da campanha  <br>1 = ativo  <br>0 = inativo | int | sim |
     *
     * **\*Exemplo
     *
     * ``` json
     * {
     * "nome_campanha_levemais": "Pague 2 leve 3",
     * "inicio_campanha_levemais": "2017-10-24 12:34:00",
     * "fim_campanha_levemais": "2099-10-25 12:34:00",
     * "prioridade_campanha_levemais": 10,
     * "comprando_produtos": 2,
     * "numero_produtos_beneficio": 1,
     * "percentual_desconto": 100,
     * "status_campanha_levemais": 1
     * }
     *
     * ```
     *
     * _Resposta_
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 200 | campanha alterada com Sucesso | mensagem | {"campanha atualizada com sucesso"} |
     * | 4xx | Requisição inválida | mensagem | {"campanha nao encontrada"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](mailto:suporte@b4commerce.com.br) "} |
     *
     * ``` json
     * {
     * "mensagem": "campanha alterada com sucesso"
     * }
     *
     * ```
     *
     * @param AtualizarCampanhaRequest2 $body
     *
     * @return AtualizarCampanha Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizarCampanha2(AtualizarCampanhaRequest2 $body): AtualizarCampanha
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/leve-mais-por-menos/20')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(AtualizarCampanha::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param CadastraCampanhaRequest3 $body
     *
     * @return CadastraCampanha1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastraCampanha3(CadastraCampanhaRequest3 $body): CadastraCampanha1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/campanha-progressiva')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('409', ErrorType::init('Bad Request', CadastraCampanhaException::class))
            ->type(CadastraCampanha1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * ```json
     * {
     * "id_campanha_promocional": "2000",
     * "status_campanha_promocional": "0",
     * "nome_campanha_promocional": "Campanha Teste CAD API - ALTERACAO",
     * "tipo_campanha_promocional": null,
     * "inicio_campanha_promocional": "2020-01-01 12:34:00",
     * "fim_campanha_promocional": "2099-10-25 12:34:00",
     * "logo_campanha_promocional": null,
     * "banner_campanha_promocional": null,
     * "obs_campanha_promocional": null,
     * "identificador_campanha_promocional": null,
     * "priorididade_campanha_promocional": "-500",
     * "campanha_vitrine": null,
     * "campanha_place": null,
     * "campanha_utms": null,
     * "seo_campanha": null,
     * "bloquear_place_campanha": null,
     * "bloquear_busca_campanha": null,
     * "bloquear_erp_campanha": null,
     * "created_at": "2020-09-02 13:57:12",
     * "updated_at": "2020-09-02 16:25:06",
     * "gerar_link": "0",
     * "regra_ativacao": "0",
     * "dias_semana": "",
     * "inicio_periodo": "00:00:00",
     * "fim_periodo": "00:00:00",
     * "temporizador": "0",
     * "title": null,
     * "meta_description": null,
     * "padrao_etiquetas": "0",
     * "url_fixa": ""
     * }
     * ```
     *
     * @return ConsultaCampanha Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function consultaCampanha3(): ConsultaCampanha
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/campanha-progressiva/10');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Bad Request', ConsultaCampanha1Exception::class))
            ->type(ConsultaCampanha::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return InativarCampanha Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function inativarCampanha3(): InativarCampanha
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/campanha-progressiva/2000');

        $_resHandler = $this->responseHandler()->type(InativarCampanha::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param AtualizarCampanhaRequest3 $body
     *
     * @return AtualizarCampanha Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizarCampanha3(AtualizarCampanhaRequest3 $body): AtualizarCampanha
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/campanha-progressiva/2000')
            ->parameters(BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(AtualizarCampanha::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
