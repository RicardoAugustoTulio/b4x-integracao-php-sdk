<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Controllers;

use ApiB4CLib\Exceptions\ApiException;
use ApiB4CLib\Models\AtualizarEndereORequest;
use ApiB4CLib\Models\CadastrarEndereORequest;
use Core\Request\Parameters\BodyParam;
use CoreInterfaces\Core\Request\RequestMethod;

class EnderecoController extends BaseController
{
    /**
     * > #GET /enderecos/{cliente_id}
     * >
     * > Retorna todos os endereços de um cliente
     *
     * **Parametros GET**
     *
     * | Campos | Descriçao | **Tipo** |
     * | --- | --- | --- |
     * | cliente_id | ID do cliente | string |
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listaEnderecos(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/enderecos/11');

        $this->execute($_reqBuilder);
    }

    /**
     * ###Adicionar Endereço
     *
     * _`#POST /enderecos`_
     *
     * **Requisição**
     *
     * \*Body
     *
     * | nome | descricao | tipo | obrigatorio |
     * | --- | --- | --- | --- |
     * | cliente_id | codigo do cliente | string | sim |
     * | tipo | tipo do endereço (Ex:casa) | string | sim |
     * | cep | cep do endereço | string | sim |
     * | endereco | logradouro do endereco | string | sim |
     * | numero | numero do endereço | string | sim |
     * | bairro | bairro do endereço | string | sim |
     * | cidade | cidade do endereço | string | sim |
     * | uf | UF do endereço | string | sim |
     * | complemento | complemento do endereço | string | não |
     * | telefone | telefone do endereço | string | não |
     * | padrao | Endereco padrao(1 para sim ou 2 para não) | string | não(padrão 2) |
     *
     * \*_\\_Exemplo
     *
     * ``` json
     * {
     * "cliente_id" : 11,
     * "tipo" : "Residencial",
     * "cep" : "12345678",
     * "endereco" : "Rua das Flores",
     * "numero" : "123",
     * "bairro" : "Centro",
     * "cidade" : "Cidade Exemplo",
     * "uf" : "EX",
     * "complemento" : "Apto 101",
     * "telefone" : "(41) 98765-4321",
     * "padrao" : 1
     * }
     *
     * ```
     *
     * **Resposta
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 201 | endereco cadastrado com sucesso, id do endereço | mensagem | {"endereco cadastrado com
     * sucesso - ID: endereco id"} |
     * | 4xx | Requisição inválida | mensagem | {"o endereco já está cadastrado"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](mailto:suporte@b4commerce.com.br)"} |
     *
     * @param CadastrarEndereORequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cadastrarEndereO(CadastrarEndereORequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/enderecos')->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * ###Atualizar Endereço
     *
     * _`#PUT /enderecos/{id}`_
     *
     * **Requisição**
     *
     * \*Body
     * \*Parâmetros de url
     *
     * | nome | descricao | tipo |
     * | --- | --- | --- |
     * | cliente_id | codigo do cliente | string |
     * | tipo | tipo do endereço (Ex:casa) | string |
     * | cep | cep do endereço | string |
     * | endereco | logradouro do endereco | string |
     * | numero | numero do endereço | string |
     * | bairro | bairro do endereço | string |
     * | cidade | cidade do endereço | string |
     * | uf | UF do endereço | string |
     * | complemento | complemento do endereço | string |
     * | telefone | telefone do endereço | string |
     * | padrao | Endereco padrao(1 para sim ou 2 para não) | string |
     *
     * \*_\\_Exemplo
     *
     * ``` json
     * {
     * "cliente_id" : 11,
     * "tipo" : "Residencials",
     * "cep" : "12345678",
     * "endereco" : "Rua das Atualizado",
     * "numero" : "123",
     * "bairro" : "Centro",
     * "cidade" : "Cidade Exemplo",
     * "uf" : "EX",
     * "complemento" : "Apto 101",
     * "telefone" : "(11) 98765-4321",
     * "padrao" : 1
     * }
     *
     * ```
     *
     * **Resposta
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 201 | endereco atualizado com sucesso | mensagem | {"endereco atualizado com sucesso"} |
     * | 4xx | Requisição inválida | mensagem | {"o endereco jnão foi encontrado"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](mailto:suporte@b4commerce.com.br)"} |
     *
     * @param AtualizarEndereORequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function atualizarEndereO(AtualizarEndereORequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/enderecos/123')
            ->auth('basic')
            ->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * ### Remover Endereço
     *
     * _`#DELETE/enderecos/{id}`_
     *
     * \*_Requisição
     * \*_Parâmetros da Url
     *
     * | Nome | Descrição | Tipo | Obrigatório |
     * | --- | --- | --- | --- |
     * | codigo | código do endereço | string | Sim |
     *
     * \*Body
     * N/A
     *
     * _Resposta_
     *
     * | HTTP Status Code | Descricao | Resposta | json |
     * | --- | --- | --- | --- |
     * | 200 | Endereço removido com Sucesso | mensagem | {"Endereço removido com sucesso"} |
     * | 4xx | Requisição inválida | mensagem | {"Endereço nao encontrado"} |
     * | 500 | Erro desconhecido. | mensagem | {"erro deconhecido contate o suporte: [suporte@b4commerce.
     * com.br](mailto:suporte@b4commerce.com.br) "} |
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function excluirEndereO(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/enderecos/123')->auth('basic');

        $this->execute($_reqBuilder);
    }
}
