<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib;

use ApiB4CLib\Authentication\BasicAuthCredentialsBuilder;
use ApiB4CLib\Authentication\BasicAuthManager;
use ApiB4CLib\Controllers\BoletoController;
use ApiB4CLib\Controllers\CampanhaController;
use ApiB4CLib\Controllers\CategoriasController;
use ApiB4CLib\Controllers\ClientesController;
use ApiB4CLib\Controllers\DescontosController;
use ApiB4CLib\Controllers\EnderecoController;
use ApiB4CLib\Controllers\EntregasDoPedidoController;
use ApiB4CLib\Controllers\EventosDaEntregaController;
use ApiB4CLib\Controllers\EventosPedidosController;
use ApiB4CLib\Controllers\FiliaisController;
use ApiB4CLib\Controllers\FiliaisFaturamentoController;
use ApiB4CLib\Controllers\MarcasController;
use ApiB4CLib\Controllers\NfPedidosController;
use ApiB4CLib\Controllers\ObservaEsPedidosController;
use ApiB4CLib\Controllers\OfertaController;
use ApiB4CLib\Controllers\PedidosController;
use ApiB4CLib\Controllers\PersonalizacaoController;
use ApiB4CLib\Controllers\PixController;
use ApiB4CLib\Controllers\PreOsController;
use ApiB4CLib\Controllers\ProdutosController;
use ApiB4CLib\Controllers\ProdutosVinculoFiliaisController;
use ApiB4CLib\Controllers\QuantidadeController;
use ApiB4CLib\Controllers\TicketsController;
use ApiB4CLib\Controllers\UsuariosController;
use ApiB4CLib\Utils\CompatibilityConverter;
use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use Unirest\Configuration;
use Unirest\HttpClient;

class ApiB4CClient implements ConfigurationInterface
{
    private $categorias;

    private $marcas;

    private $produtos;

    private $pedidos;

    private $entregasDoPedido;

    private $campanha;

    private $oferta;

    private $quantidade;

    private $preOs;

    private $eventosDaEntrega;

    private $eventosPedidos;

    private $nfPedidos;

    private $filiais;

    private $filiaisFaturamento;

    private $produtosVinculoFiliais;

    private $usuarios;

    private $endereco;

    private $descontos;

    private $clientes;

    private $boleto;

    private $pix;

    private $tickets;

    private $observaEsPedidos;

    private $personalizacao;

    private $basicAuthManager;

    private $config;

    private $client;

    /**
     * @see ApiB4CClientBuilder::init()
     * @see ApiB4CClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->basicAuthManager = new BasicAuthManager($this->config);
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::SERVER_1)
            ->authManagers(['basic' => $this->basicAuthManager])
            ->build();
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return ApiB4CClientBuilder ApiB4CClientBuilder instance
     */
    public function toBuilder(): ApiB4CClientBuilder
    {
        $builder = ApiB4CClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->httpCallback($this->config['httpCallback'] ?? null);

        $basicAuth = $this->getBasicAuthCredentialsBuilder();
        if ($basicAuth != null) {
            $builder->basicAuthCredentials($basicAuth);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getBasicAuthCredentials(): BasicAuthCredentials
    {
        return $this->basicAuthManager;
    }

    public function getBasicAuthCredentialsBuilder(): ?BasicAuthCredentialsBuilder
    {
        if (empty($this->basicAuthManager->getUsername()) && empty($this->basicAuthManager->getPassword())) {
            return null;
        }
        return BasicAuthCredentialsBuilder::init(
            $this->basicAuthManager->getUsername(),
            $this->basicAuthManager->getPassword()
        );
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see ApiB4CClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see ApiB4CClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::SERVER_1): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Categorias Controller
     */
    public function getCategoriasController(): CategoriasController
    {
        if ($this->categorias == null) {
            $this->categorias = new CategoriasController($this->client);
        }
        return $this->categorias;
    }

    /**
     * Returns Marcas Controller
     */
    public function getMarcasController(): MarcasController
    {
        if ($this->marcas == null) {
            $this->marcas = new MarcasController($this->client);
        }
        return $this->marcas;
    }

    /**
     * Returns Produtos Controller
     */
    public function getProdutosController(): ProdutosController
    {
        if ($this->produtos == null) {
            $this->produtos = new ProdutosController($this->client);
        }
        return $this->produtos;
    }

    /**
     * Returns Pedidos Controller
     */
    public function getPedidosController(): PedidosController
    {
        if ($this->pedidos == null) {
            $this->pedidos = new PedidosController($this->client);
        }
        return $this->pedidos;
    }

    /**
     * Returns Entregas Do Pedido Controller
     */
    public function getEntregasDoPedidoController(): EntregasDoPedidoController
    {
        if ($this->entregasDoPedido == null) {
            $this->entregasDoPedido = new EntregasDoPedidoController($this->client);
        }
        return $this->entregasDoPedido;
    }

    /**
     * Returns Campanha Controller
     */
    public function getCampanhaController(): CampanhaController
    {
        if ($this->campanha == null) {
            $this->campanha = new CampanhaController($this->client);
        }
        return $this->campanha;
    }

    /**
     * Returns Oferta Controller
     */
    public function getOfertaController(): OfertaController
    {
        if ($this->oferta == null) {
            $this->oferta = new OfertaController($this->client);
        }
        return $this->oferta;
    }

    /**
     * Returns Quantidade Controller
     */
    public function getQuantidadeController(): QuantidadeController
    {
        if ($this->quantidade == null) {
            $this->quantidade = new QuantidadeController($this->client);
        }
        return $this->quantidade;
    }

    /**
     * Returns Pre Os Controller
     */
    public function getPreOsController(): PreOsController
    {
        if ($this->preOs == null) {
            $this->preOs = new PreOsController($this->client);
        }
        return $this->preOs;
    }

    /**
     * Returns Eventos Da Entrega Controller
     */
    public function getEventosDaEntregaController(): EventosDaEntregaController
    {
        if ($this->eventosDaEntrega == null) {
            $this->eventosDaEntrega = new EventosDaEntregaController($this->client);
        }
        return $this->eventosDaEntrega;
    }

    /**
     * Returns Eventos Pedidos Controller
     */
    public function getEventosPedidosController(): EventosPedidosController
    {
        if ($this->eventosPedidos == null) {
            $this->eventosPedidos = new EventosPedidosController($this->client);
        }
        return $this->eventosPedidos;
    }

    /**
     * Returns Nf Pedidos Controller
     */
    public function getNfPedidosController(): NfPedidosController
    {
        if ($this->nfPedidos == null) {
            $this->nfPedidos = new NfPedidosController($this->client);
        }
        return $this->nfPedidos;
    }

    /**
     * Returns Filiais Controller
     */
    public function getFiliaisController(): FiliaisController
    {
        if ($this->filiais == null) {
            $this->filiais = new FiliaisController($this->client);
        }
        return $this->filiais;
    }

    /**
     * Returns Filiais Faturamento Controller
     */
    public function getFiliaisFaturamentoController(): FiliaisFaturamentoController
    {
        if ($this->filiaisFaturamento == null) {
            $this->filiaisFaturamento = new FiliaisFaturamentoController($this->client);
        }
        return $this->filiaisFaturamento;
    }

    /**
     * Returns Produtos Vinculo Filiais Controller
     */
    public function getProdutosVinculoFiliaisController(): ProdutosVinculoFiliaisController
    {
        if ($this->produtosVinculoFiliais == null) {
            $this->produtosVinculoFiliais = new ProdutosVinculoFiliaisController($this->client);
        }
        return $this->produtosVinculoFiliais;
    }

    /**
     * Returns Usuarios Controller
     */
    public function getUsuariosController(): UsuariosController
    {
        if ($this->usuarios == null) {
            $this->usuarios = new UsuariosController($this->client);
        }
        return $this->usuarios;
    }

    /**
     * Returns Endereco Controller
     */
    public function getEnderecoController(): EnderecoController
    {
        if ($this->endereco == null) {
            $this->endereco = new EnderecoController($this->client);
        }
        return $this->endereco;
    }

    /**
     * Returns Descontos Controller
     */
    public function getDescontosController(): DescontosController
    {
        if ($this->descontos == null) {
            $this->descontos = new DescontosController($this->client);
        }
        return $this->descontos;
    }

    /**
     * Returns Clientes Controller
     */
    public function getClientesController(): ClientesController
    {
        if ($this->clientes == null) {
            $this->clientes = new ClientesController($this->client);
        }
        return $this->clientes;
    }

    /**
     * Returns Boleto Controller
     */
    public function getBoletoController(): BoletoController
    {
        if ($this->boleto == null) {
            $this->boleto = new BoletoController($this->client);
        }
        return $this->boleto;
    }

    /**
     * Returns Pix Controller
     */
    public function getPixController(): PixController
    {
        if ($this->pix == null) {
            $this->pix = new PixController($this->client);
        }
        return $this->pix;
    }

    /**
     * Returns Tickets Controller
     */
    public function getTicketsController(): TicketsController
    {
        if ($this->tickets == null) {
            $this->tickets = new TicketsController($this->client);
        }
        return $this->tickets;
    }

    /**
     * Returns Observa Es Pedidos Controller
     */
    public function getObservaEsPedidosController(): ObservaEsPedidosController
    {
        if ($this->observaEsPedidos == null) {
            $this->observaEsPedidos = new ObservaEsPedidosController($this->client);
        }
        return $this->observaEsPedidos;
    }

    /**
     * Returns Personalizacao Controller
     */
    public function getPersonalizacaoController(): PersonalizacaoController
    {
        if ($this->personalizacao == null) {
            $this->personalizacao = new PersonalizacaoController($this->client);
        }
        return $this->personalizacao;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::SERVER_1 => 'https://api/v2',
            Server::SERVER_2 => 'http://example.com/marca'
        ]
    ];
}
