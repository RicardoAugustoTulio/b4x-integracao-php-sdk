<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Tests\Controllers;

use ApiB4CLib\Controllers\MarcasController;
use ApiB4CLib\Exceptions;
use ApiB4CLib\Models;
use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;

class MarcasControllerTest extends BaseTestController
{
    /**
     * @var MarcasController MarcasController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getMarcasController();
    }

    public function testCadastrarMarca()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"codigo\": \"151515\",\r\n  \"descricao\": \"Marca Teste\"\r\n}",
            Models\CadastrarMarcaRequest::class
        );

        // Perform API call
        try {
            self::$controller->cadastrarMarca($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testAtualizarMarca()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"descricao\": \"Marca Teste alterado\",\r\n  \"status\": 1\r\n}",
            Models\AtualizarMarcaRequest::class
        );

        // Perform API call
        try {
            self::$controller->atualizarMarca($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testExcluirMarca()
    {
        // Perform API call
        try {
            self::$controller->excluirMarca();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testListarMarcas()
    {
        // Perform API call
        try {
            self::$controller->listarMarcas();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testConsultaMarca()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaMarca();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 17:22:20 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9998', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"marcas\": [\r\n    {\r\n      \"campanha\": \"9\",\r\n      \"nome\":" .
                " \"ALBRAS\",\r\n      \"quantidade\": \"3.00\"\r\n    }\r\n  ],\r\n  \"brindes" .
                "\": [\r\n    {\r\n      \"campanha\": \"9\",\r\n      \"sku\": \"OLD_1003\",\r" .
                "\n      \"nome\": \"Furadeira de impacto 1/2' 600 watts 220v velocidade variÃ¡ve" .
                "l e reversÃ­vel DV16VSSxb hitachi\"\r\n    }\r\n  ]\r\n}"
            )))
            ->assert();
    }

    public function testCadastraMarca()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"tipo\": 1,\r\n  \"valorTotal\": \"20\",\r\n  \"marcas\": [\r\n    {\r\n  " .
            "    \"id\": \"2\",\r\n      \"quantidade\": \"5\"\r\n    },\r\n    {\r\n      \"id" .
            "\": \"13\",\r\n      \"quantidade\": \"1\"\r\n    }\r\n  ],\r\n  \"brindes\": [\r\n" .
            "    {\r\n      \"sku\": \"123123\"\r\n    }\r\n  ]\r\n}",
            Models\CadastraMarcaRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastraMarca($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 17:34:43 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9996', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"marcas cadastradas com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testDeletarMarca()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"marcas\": [\r\n    {\r\n      \"id\": 13\r\n    },\r\n    {\r\n      \"id" .
            "\": 12\r\n    },\r\n    {\r\n      \"id\": 2\r\n    }\r\n  ],\r\n  \"brindes\": [\r" .
            "\n    {}\r\n  ]\r\n}",
            Models\DeletarMarcaRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deletarMarca($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 17:34:37 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9997', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Marcas deletadas com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }
}
