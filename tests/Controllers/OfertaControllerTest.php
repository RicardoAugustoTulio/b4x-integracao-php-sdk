<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Tests\Controllers;

use ApiB4CLib\Controllers\OfertaController;
use ApiB4CLib\Exceptions;
use ApiB4CLib\Models;
use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;

class OfertaControllerTest extends BaseTestController
{
    /**
     * @var OfertaController OfertaController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getOfertaController();
    }

    public function testCadastraOferta()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"id_campanha_brindes\": \"20\",\r\n  \"id_oferta\": \"30\",\r\n  \"nomeBri" .
            "nde\": \"teste API oferta\",\r\n  \"qtdeBrindes\": \"1\"\r\n}",
            Models\CadastraOfertaRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastraOferta($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:31:53 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha cadastrada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testConsultaOferta()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaOferta();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:33:32 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"id_oferta\": \"30\",\r\n  \"campanha_brindes\": \"20\",\r\n  \"status" .
                "_brindes_oferta\": \"1\",\r\n  \"valorTotal\": \"0.00\",\r\n  \"qtdeBrindes\": " .
                "\"1\",\r\n  \"tipoValor\": \"0\",\r\n  \"nomeBrinde\": \"teste API oferta\",\r" .
                "\n  \"quantidade_total_carrinho\": \"0\",\r\n  \"valor_total_carrinho\": \"0.00" .
                "\"\r\n}"
            )))
            ->assert();
    }

    public function testInativarOferta()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->inativarOferta();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:34:22 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha desativada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testAtualizarOferta()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"nomeBrinde\": \"teste API oferta EDITADA\",\r\n  \"qtdeBrindes\": \"2\"," .
            "\r\n  \"status_brindes_oferta\": 1\r\n}",
            Models\AtualizarOfertaRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->atualizarOferta($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:35:40 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha atualizada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }
}
