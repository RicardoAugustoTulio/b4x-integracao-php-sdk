<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Tests\Controllers;

use ApiB4CLib\Controllers\FiliaisController;
use ApiB4CLib\Exceptions;
use ApiB4CLib\Models;
use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;

class FiliaisControllerTest extends BaseTestController
{
    /**
     * @var FiliaisController FiliaisController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getFiliaisController();
    }

    public function testCadastrarFilial()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"codigo\": 1234,\r\n  \"nome\": \"teste b4c nome alteracao\",\r\n  \"razao" .
            "_social\": \"teste b4c razao social alteracao\",\r\n  \"cnpj\": \"123456789\",\r\n " .
            " \"ie\": \"321654\",\r\n  \"cep\": \"82320270\",\r\n  \"endereco\": \"luiz pelegrin" .
            "o toaldo\",\r\n  \"numero\": \"96\",\r\n  \"complemento\": \"casa\",\r\n  \"bairro" .
            "\": \"santa felicidade\",\r\n  \"cidade\": \"curitiba\",\r\n  \"uf\": \"PR\",\r\n  " .
            "\"email_contato\": \"contato@b4commerce.com.br\",\r\n  \"email_vendas\": \"vendas@b" .
            "4commerce.com.br\",\r\n  \"fone\": \"4132733134\",\r\n  \"fone2\": \"41996381828\"," .
            "\r\n  \"url_google_maps\": \"google maps\",\r\n  \"url_video_youtube\": \"video you" .
            "tube\",\r\n  \"possui_estacionamento\": \"sim\",\r\n  \"horario_atendimento\": \"1 " .
            "a 2\",\r\n  \"slogan\": \"nao tem\",\r\n  \"status\": 1\r\n}",
            Models\CadastrarFilialRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastrarFilial($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.0', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 03 Feb 2021 17:46:50 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9998', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(201)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Filial cadastrada com sucesso\",\r\n  \"responseCode\": \"201\"\r\n}"
            )))
            ->assert();
    }

    public function testConsultaFilial()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaFilial();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.0', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 03 Feb 2021 17:48:47 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9998', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "[\r\n  {\r\n    \"codigo\": \"123\",\r\n    \"nome\": \"teste b4c nome alterac" .
                "ao\",\r\n    \"razao_social\": \"teste b4c razao social alteracao 2\",\r\n    " .
                "\"cnpj\": \"123456789\",\r\n    \"cep\": \"82320270\",\r\n    \"endereco\": \"l" .
                "uiz pelegrino toaldo\",\r\n    \"numero\": \"96\",\r\n    \"complemento\": \"ca" .
                "sa\",\r\n    \"bairro\": \"santa felicidade\",\r\n    \"cidade\": \"curitiba\"," .
                "\r\n    \"uf\": \"PR\",\r\n    \"fone\": \"4132733134\",\r\n    \"fone2\": \"41" .
                "996381828\",\r\n    \"url_google_maps\": \"google maps\",\r\n    \"url_video_yo" .
                "utube\": \"video youtube\",\r\n    \"possui_estacionamento\": \"sim\",\r\n    " .
                "\"horario_atendimento\": \"1 a 2\",\r\n    \"status\": \"1\"\r\n  }\r\n]"
            )))
            ->assert();
    }

    public function testDeletarFilial()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deletarFilial();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.0', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 03 Feb 2021 17:50:00 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9999', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"filial removida com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testAtualizarFilial()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"nome\": \"teste b4c nome alteracao\",\r\n  \"razao_social\": \"teste b4c " .
            "razao social alteracao 2\",\r\n  \"cnpj\": \"123456789\",\r\n  \"ie\": \"321654\"," .
            "\r\n  \"cep\": \"82320270\",\r\n  \"endereco\": \"luiz pelegrino toaldo\",\r\n  \"n" .
            "umero\": \"96\",\r\n  \"complemento\": \"casa\",\r\n  \"bairro\": \"santa felicidad" .
            "e\",\r\n  \"cidade\": \"curitiba\",\r\n  \"uf\": \"PR\",\r\n  \"email_contato\": \"" .
            "contato@b4commerce.com.br\",\r\n  \"email_vendas\": \"vendas@b4commerce.com.br\",\r" .
            "\n  \"fone\": \"4132733134\",\r\n  \"fone2\": \"41996381828\",\r\n  \"url_google_ma" .
            "ps\": \"google maps\",\r\n  \"url_video_youtube\": \"video youtube\",\r\n  \"possui" .
            "_estacionamento\": \"sim\",\r\n  \"horario_atendimento\": \"1 a 2\",\r\n  \"slogan" .
            "\": \"nao tem\",\r\n  \"status\": 1\r\n}",
            Models\AtualizarFilialRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->atualizarFilial($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.0', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 03 Feb 2021 17:50:57 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9998', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Atualizado com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }
}
