<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Tests\Controllers;

use ApiB4CLib\Controllers\NfPedidosController;
use ApiB4CLib\Exceptions;
use ApiB4CLib\Models;
use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;

class NfPedidosControllerTest extends BaseTestController
{
    /**
     * @var NfPedidosController NfPedidosController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getNfPedidosController();
    }

    public function testEnviaNFPedido()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"operacao\": \"\",\r\n  \"numero\": \"1500\",\r\n  \"nf\": \"4120090091508" .
            "6000263550040000149881885575321\",\r\n  \"xml\": \"\"\r\n}",
            Models\EnviaNFPedidoRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->enviaNFPedido($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Tue, 29 Sep 2020 19:32:04 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(201)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Nota fiscal inserida com sucesso\",\r\n  \"responseCode" .
                "\": \"201\"\r\n}"
            )))
            ->assert();
    }

    public function testDeletaNFPedido()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"operacao\": \"\",\r\n  \"numero\": \"1500\"\r\n}",
            Models\DeletaNFPedidoRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deletaNFPedido($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Tue, 29 Sep 2020 19:36:05 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Nota fiscal removida com sucesso\",\r\n  \"responseCode" .
                "\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testConsultarNFPedido()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultarNFPedido();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Tue, 29 Sep 2020 19:37:41 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"notas_fiscais\": [\r\n    {\r\n      \"data\": \"2020-09-29 16:36:57" .
                "\",\r\n      \"tipo\": \"\",\r\n      \"numero\": \"1500\",\r\n      \"chave\":" .
                " \"41200900915086000263550040000149881885575321\",\r\n      \"xml\": \"\",\r\n " .
                "     \"codigo_fornecedor\": \"0\",\r\n      \"url_download\": \"\"\r\n    }\r\n" .
                "  ]\r\n}"
            )))
            ->assert();
    }
}
