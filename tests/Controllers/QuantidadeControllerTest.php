<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Tests\Controllers;

use ApiB4CLib\Controllers\QuantidadeController;
use ApiB4CLib\Exceptions;
use ApiB4CLib\Models;
use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;

class QuantidadeControllerTest extends BaseTestController
{
    /**
     * @var QuantidadeController QuantidadeController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getQuantidadeController();
    }

    public function testConsultaQuantidade()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaQuantidade();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 17:53:05 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9999', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object("{\r\n  \"campanha\": {\r\n    \"id_oferta\": \"7\",\r\n    \"campanha_brindes" .
                "\": \"8\",\r\n    \"valor_total_carrinho\": \"200.00\",\r\n    \"quantidade_tot" .
                "al_carrinho\": \"5\"\r\n  },\r\n  \"brindes\": [\r\n    {\r\n      \"campanha\"" .
                ": \"7\",\r\n      \"sku\": \"105294\",\r\n      \"nome\": \"Kit de Ponta Bits S" .
                "extavadas 1/4\\\" 061796 Robust 8 Peças\"\r\n    },\r\n    {\r\n      \"campanh" .
                "a\": \"7\",\r\n      \"sku\": \"123136\",\r\n      \"nome\": \"Macaco Hidráulic" .
                "o Jacaré 2Ton J2301 Bovenau - Com Maleta\"\r\n    },\r\n    {\r\n      \"campan" .
                "ha\": \"7\",\r\n      \"sku\": \"OLD_1036\",\r\n      \"nome\": \"Soprador Térm" .
                "ico 1300W 300/500°C HL1500 Steinel Comala - 127 Volts\"\r\n    },\r\n    {\r\n " .
                "     \"campanha\": \"7\",\r\n      \"sku\": \"OLD_1057\",\r\n      \"nome\": \"" .
                "MARTELO BOLA 500 GR FAMASTIL\"\r\n    },\r\n    {\r\n      \"campanha\": \"7\"," .
                "\r\n      \"sku\": \"158703\",\r\n      \"nome\": \"prumo de parede de metal 50" .
                "0 gramas vonder 3321158500\"\r\n    },\r\n    {\r\n      \"campanha\": \"7\",\r" .
                "\n      \"sku\": \"OLD_1178\",\r\n      \"nome\": \"Lixa Folha D'Água Para Poli" .
                "mento Grão 1500 3M\"\r\n    }\r\n  ]\r\n}")
            ))
            ->assert();
    }

    public function testAtualizaQuantidade()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"valor_total_carrinho\": \"650\",\r\n  \"quantidade_total_carrinho\": \"2\"\r\n}",
            Models\AtualizaQuantidadeRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->atualizaQuantidade($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 18:10:04 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9999', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha atualizada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testCadastraBrindes()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"brindes\": [\r\n    {\r\n      \"sku\": \"78050\"\r\n    }\r\n  ]\r\n}",
            Models\CadastraBrindesRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastraBrindes($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 18:22:30 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9996', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"brindes cadastrados com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testDeletarBrindes()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"brindes\": [\r\n    {\r\n      \"sku\": \"78050\"\r\n    }\r\n  ]\r\n}",
            Models\DeletarBrindesRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deletarBrindes($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 18:25:11 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9998', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Marcas deletadas com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }
}
