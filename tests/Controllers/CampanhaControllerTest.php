<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Tests\Controllers;

use ApiB4CLib\Controllers\CampanhaController;
use ApiB4CLib\Exceptions;
use ApiB4CLib\Models;
use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;

class CampanhaControllerTest extends BaseTestController
{
    /**
     * @var CampanhaController CampanhaController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getCampanhaController();
    }

    public function testCadastraCampanha()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"id_campanha_promocional\": \"2001\",\r\n  \"nome_campanha_promocional\": " .
            "\"Campanha Teste CADASTRO PELA API 2\",\r\n  \"inicio_campanha_promocional\": \"201" .
            "7-10-24 12:34:00\",\r\n  \"fim_campanha_promocional\": \"2099-10-25 12:34:00\",\r\n" .
            "  \"priorididade_campanha_promocional\": \"800\"\r\n}",
            Models\CadastraCampanhaRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastraCampanha($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Date'] = ['Wed, 02 Sep 2020 20:11:32 GMT', false];
        $headers['Server'] = ['Apache', false];
        $headers['X-Powered-By'] = ['PHP/5.6.40', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Vary'] = ['Authorization', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];
        $headers['Transfer-Encoding'] = ['chunked', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha cadastrada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testConsultaCampanha()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaCampanha();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Date'] = ['Wed, 02 Sep 2020 20:12:04 GMT', false];
        $headers['Server'] = ['Apache', false];
        $headers['X-Powered-By'] = ['PHP/5.6.40', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Vary'] = ['Authorization', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];
        $headers['Transfer-Encoding'] = ['chunked', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"id_campanha_promocional\": \"2000\",\r\n  \"status_campanha_promocion" .
                "al\": \"0\",\r\n  \"nome_campanha_promocional\": \"Campanha Teste CAD API - ALT" .
                "ERACAO\",\r\n  \"tipo_campanha_promocional\": null,\r\n  \"inicio_campanha_prom" .
                "ocional\": \"2020-01-01 12:34:00\",\r\n  \"fim_campanha_promocional\": \"2099-1" .
                "0-25 12:34:00\",\r\n  \"logo_campanha_promocional\": null,\r\n  \"banner_campan" .
                "ha_promocional\": null,\r\n  \"obs_campanha_promocional\": null,\r\n  \"identif" .
                "icador_campanha_promocional\": null,\r\n  \"priorididade_campanha_promocional\"" .
                ": \"-500\",\r\n  \"campanha_vitrine\": null,\r\n  \"campanha_place\": null,\r\n" .
                "  \"campanha_utms\": null,\r\n  \"seo_campanha\": null,\r\n  \"bloquear_place_c" .
                "ampanha\": null,\r\n  \"bloquear_busca_campanha\": null,\r\n  \"bloquear_erp_ca" .
                "mpanha\": null,\r\n  \"created_at\": \"2020-09-02 13:57:12\",\r\n  \"updated_at" .
                "\": \"2020-09-02 16:25:06\",\r\n  \"gerar_link\": \"0\",\r\n  \"regra_ativacao" .
                "\": \"0\",\r\n  \"dias_semana\": \"\",\r\n  \"inicio_periodo\": \"00:00:00\",\r" .
                "\n  \"fim_periodo\": \"00:00:00\",\r\n  \"temporizador\": \"0\",\r\n  \"title\"" .
                ": null,\r\n  \"meta_description\": null,\r\n  \"padrao_etiquetas\": \"0\",\r\n " .
                " \"url_fixa\": \"\"\r\n}"
            )))
            ->assert();
    }

    public function testInativarCampanha()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->inativarCampanha();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Date'] = ['Wed, 02 Sep 2020 20:12:25 GMT', false];
        $headers['Server'] = ['Apache', false];
        $headers['X-Powered-By'] = ['PHP/5.6.40', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Vary'] = ['Authorization', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];
        $headers['Transfer-Encoding'] = ['chunked', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha desativada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testAtualizarCampanha()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"nome_campanha_promocional\": \"Campanha Teste CAD API - ALTERACAO\",\r\n " .
            " \"inicio_campanha_promocional\": \"2020-01-01 12:34:00\",\r\n  \"fim_campanha_prom" .
            "ocional\": \"2099-10-25 12:34:00\",\r\n  \"priorididade_campanha_promocional\": \"-" .
            "500\"\r\n}",
            Models\AtualizarCampanhaRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->atualizarCampanha($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Date'] = ['Wed, 02 Sep 2020 20:13:17 GMT', false];
        $headers['Server'] = ['Apache', false];
        $headers['X-Powered-By'] = ['PHP/5.6.40', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Vary'] = ['Authorization', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];
        $headers['Transfer-Encoding'] = ['chunked', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha atualizada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testCadastraCampanha1()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"id_campanha_brindes\": \"20\",\r\n  \"nome_campanha_brindes\": \"Campanha" .
            " Teste CADASTRO PELA API\",\r\n  \"inicio_campanha_brindes\": \"2017-10-24 12:34:00" .
            "\",\r\n  \"fim_campanha_brindes\": \"2099-10-25 12:34:00\"\r\n}",
            Models\CadastraCampanhaRequest1::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastraCampanha1($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:21:53 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha cadastrada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testConsultaCampanha1()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaCampanha1();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:19:17 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Set-Cookie'] = ['PHPSESSID=3h7b0251ems74v301fhm40tp4i; path=/', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\r\n  \"id_campanha_brindes\": \"9\",\r\n  \"status_campanha_brindes\": " .
                    "\"1\",\r\n  \"nome_campanha_brindes\": \"B4C Teste Produtos\",\r\n  \"tipo_" .
                    "campanha_brindes\": \"3\",\r\n  \"inicio_campanha_brindes\": \"2020-11-10 0" .
                    "9:32:00\",\r\n  \"fim_campanha_brindes\": \"2020-11-30 09:32:00\",\r\n  \"l" .
                    "ogo_campanha_brindes\": \"\",\r\n  \"banner_campanha_brindes\": null,\r\n  " .
                    "\"obs_campanha_brindes\": \"\",\r\n  \"identificador_campanha_brindes\": \"" .
                    "B4C Teste Produtos\",\r\n  \"priorididade_campanha_brindes\": \"3\",\r\n  " .
                    "\"brindes_utms\": \"0\"\r\n}"
                )
            ))
            ->assert();
    }

    public function testInativarCampanha1()
    {
        // Perform API call
        try {
            self::$controller->inativarCampanha1();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testAtualizarCampanha1()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"nome_campanha_brindes\": \"Campanha Teste CADASTRO PELA API EDITADO\",\r" .
            "\n  \"inicio_campanha_brindes\": \"2017-10-24 12:34:00\",\r\n  \"fim_campanha_brind" .
            "es\": \"2099-10-25 12:34:00\",\r\n  \"priorididade_campanha_brindes\": \"10\",\r\n " .
            " \"status_campanha_brindes\": 1\r\n}",
            Models\AtualizarCampanhaRequest1::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->atualizarCampanha1($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:27:41 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha atualizada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testCadastraCampanha2()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"id_campanha_levemais\": \"20\",\r\n  \"nome_campanha_levemais\": \"Pague " .
            "2 leve 3\",\r\n  \"inicio_campanha_levemais\": \"2017-10-24 12:34:00\",\r\n  \"fim_" .
            "campanha_levemais\": \"2099-10-25 12:34:00\",\r\n  \"prioridade_campanha_levemais\"" .
            ": 10,\r\n  \"comprando_produtos\": 2,\r\n  \"numero_produtos_beneficio\": 1,\r\n  " .
            "\"percentual_desconto\": 100,\r\n  \"status_campanha_levemais\": 1\r\n}",
            Models\CadastraCampanhaRequest2::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastraCampanha2($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Date'] = ['Wed, 03 May 2023 13:19:45 GMT', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['Server'] = ['nginx/1.23.3', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Set-Cookie'] = ['PHPSESSID=t99vnfeh9k97ebge60g930heve; path=/', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9999', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha cadastrada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testConsultaCampanha2()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaCampanha2();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:19:17 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Set-Cookie'] = ['PHPSESSID=3h7b0251ems74v301fhm40tp4i; path=/', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "[\r\n  {\r\n    \"id_campanha_levemais\": \"20\",\r\n    \"status_campanha_lev" .
                "emais\": \"1\",\r\n    \"nome_campanha_levemais\": \"Pague 2 leve 3\",\r\n    " .
                "\"inicio_campanha_levemais\": \"Pague 2 leve 3\",\r\n    \"fim_campanha_levemai" .
                "s\": \"Pague 2 leve 3\",\r\n    \"prioridade_campanha_levemais\": \"10\",\r\n  " .
                "  \"comprando_produtos\": \"2\",\r\n    \"numero_produtos_beneficio\": \"1\",\r" .
                "\n    \"percentual_desconto\": \"100.00\"\r\n  }\r\n]"
            )))
            ->assert();
    }

    public function testInativarCampanha2()
    {
        // Perform API call
        try {
            self::$controller->inativarCampanha2();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testAtualizarCampanha2()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"nome_campanha_levemais\": \"Pague 2 leve 3\",\r\n  \"inicio_campanha_leve" .
            "mais\": \"2017-10-24 12:34:00\",\r\n  \"fim_campanha_levemais\": \"2099-10-25 12:34" .
            ":00\",\r\n  \"prioridade_campanha_levemais\": 10,\r\n  \"comprando_produtos\": 2,\r" .
            "\n  \"numero_produtos_beneficio\": 1,\r\n  \"percentual_desconto\": 100,\r\n  \"sta" .
            "tus_campanha_levemais\": 1\r\n}",
            Models\AtualizarCampanhaRequest2::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->atualizarCampanha2($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Host'] = ['localhost:8001', false];
        $headers['Date'] = ['Thu, 12 Nov 2020 17:27:41 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/7.3.18-1+ubuntu18.04.1+deb.sury.org+1', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha atualizada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testCadastraCampanha3()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"id_campanha_promocional\": 10,\r\n  \"nome_campanha_promocional\": \"Camp" .
            "anha Teste CADASTRO PELA API 10\",\r\n  \"inicio_campanha_promocional\": \"2017-10-" .
            "24 12:34:00\",\r\n  \"fim_campanha_promocional\": \"2099-10-25 12:34:00\",\r\n  \"p" .
            "riorididade_campanha_promocional\": \"800\",\r\n  \"tipo_campanha_promocional\": 3" .
            "\r\n}",
            Models\CadastraCampanhaRequest3::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastraCampanha3($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Date'] = ['Wed, 02 Sep 2020 20:11:32 GMT', false];
        $headers['Server'] = ['Apache', false];
        $headers['X-Powered-By'] = ['PHP/5.6.40', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Vary'] = ['Authorization', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];
        $headers['Transfer-Encoding'] = ['chunked', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha cadastrada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testConsultaCampanha3()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaCampanha3();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Date'] = ['Wed, 02 Sep 2020 20:12:04 GMT', false];
        $headers['Server'] = ['Apache', false];
        $headers['X-Powered-By'] = ['PHP/5.6.40', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Vary'] = ['Authorization', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];
        $headers['Transfer-Encoding'] = ['chunked', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"id_campanha_promocional\": \"2000\",\r\n  \"status_campanha_promocion" .
                "al\": \"0\",\r\n  \"nome_campanha_promocional\": \"Campanha Teste CAD API - ALT" .
                "ERACAO\",\r\n  \"tipo_campanha_promocional\": null,\r\n  \"inicio_campanha_prom" .
                "ocional\": \"2020-01-01 12:34:00\",\r\n  \"fim_campanha_promocional\": \"2099-1" .
                "0-25 12:34:00\",\r\n  \"logo_campanha_promocional\": null,\r\n  \"banner_campan" .
                "ha_promocional\": null,\r\n  \"obs_campanha_promocional\": null,\r\n  \"identif" .
                "icador_campanha_promocional\": null,\r\n  \"priorididade_campanha_promocional\"" .
                ": \"-500\",\r\n  \"campanha_vitrine\": null,\r\n  \"campanha_place\": null,\r\n" .
                "  \"campanha_utms\": null,\r\n  \"seo_campanha\": null,\r\n  \"bloquear_place_c" .
                "ampanha\": null,\r\n  \"bloquear_busca_campanha\": null,\r\n  \"bloquear_erp_ca" .
                "mpanha\": null,\r\n  \"created_at\": \"2020-09-02 13:57:12\",\r\n  \"updated_at" .
                "\": \"2020-09-02 16:25:06\",\r\n  \"gerar_link\": \"0\",\r\n  \"regra_ativacao" .
                "\": \"0\",\r\n  \"dias_semana\": \"\",\r\n  \"inicio_periodo\": \"00:00:00\",\r" .
                "\n  \"fim_periodo\": \"00:00:00\",\r\n  \"temporizador\": \"0\",\r\n  \"title\"" .
                ": null,\r\n  \"meta_description\": null,\r\n  \"padrao_etiquetas\": \"0\",\r\n " .
                " \"url_fixa\": \"\"\r\n}"
            )))
            ->assert();
    }

    public function testInativarCampanha3()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->inativarCampanha3();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Date'] = ['Wed, 02 Sep 2020 20:12:25 GMT', false];
        $headers['Server'] = ['Apache', false];
        $headers['X-Powered-By'] = ['PHP/5.6.40', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Vary'] = ['Authorization', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];
        $headers['Transfer-Encoding'] = ['chunked', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha desativada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testAtualizarCampanha3()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"id_campanha_promocional\": 10,\r\n  \"nome_campanha_promocional\": \"Camp" .
            "anha Teste Alteracao CADASTRO PELA API 10\",\r\n  \"inicio_campanha_promocional\": " .
            "\"2017-10-24 12:34:00\",\r\n  \"fim_campanha_promocional\": \"2099-10-25 12:34:00\"" .
            ",\r\n  \"priorididade_campanha_promocional\": \"800\",\r\n  \"tipo_campanha_promoci" .
            "onal\": 3\r\n}",
            Models\AtualizarCampanhaRequest3::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->atualizarCampanha3($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json;charset=utf-8', false];
        $headers['Date'] = ['Wed, 02 Sep 2020 20:13:17 GMT', false];
        $headers['Server'] = ['Apache', false];
        $headers['X-Powered-By'] = ['PHP/5.6.40', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Vary'] = ['Authorization', false];
        $headers['Keep-Alive'] = ['timeout=5, max=100', false];
        $headers['Connection'] = ['Keep-Alive', false];
        $headers['Transfer-Encoding'] = ['chunked', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Campanha atualizada com sucesso\",\r\n  \"responseCode\": \"200\"\r\n}"
            )))
            ->assert();
    }
}
