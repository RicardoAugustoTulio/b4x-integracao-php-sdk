<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Tests\Controllers;

use ApiB4CLib\Controllers\PersonalizacaoController;
use ApiB4CLib\Exceptions;
use ApiB4CLib\Models;
use Core\TestCase\TestParam;

class PersonalizacaoControllerTest extends BaseTestController
{
    /**
     * @var PersonalizacaoController PersonalizacaoController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getPersonalizacaoController();
    }

    public function testCadastrar()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"codigo\": \"1\",\r\n  \"nome\": \"SERIGRAFIA 1 COR\"\r\n}",
            Models\CadastrarRequest::class
        );

        // Perform API call
        try {
            self::$controller->cadastrar($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testAtualizar()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"codigo\": \"1\",\r\n  \"nome\": \"SERIGRAFIA 1 COR ALTERADO\"\r\n}",
            Models\AtualizarRequest::class
        );

        // Perform API call
        try {
            self::$controller->atualizar($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testNewRequest()
    {
        // Parameters for the API call
        $body = TestParam::object("{\r\n  \"codigo\": \"1\"\r\n}", Models\NewRequestRequest::class);

        // Perform API call
        try {
            self::$controller->newRequest($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }
}
