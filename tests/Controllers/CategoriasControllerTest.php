<?php

declare(strict_types=1);

/*
 * ApiB4CLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ApiB4CLib\Tests\Controllers;

use ApiB4CLib\Controllers\CategoriasController;
use ApiB4CLib\Exceptions;
use ApiB4CLib\Models;
use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;

class CategoriasControllerTest extends BaseTestController
{
    /**
     * @var CategoriasController CategoriasController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getCategoriasController();
    }

    public function testCadastrarCategoria()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"codigo\": \"1002\",\r\n  \"descricao\": \"B4C sUBCategoria\",\r\n  \"codi" .
            "go_pai\": \"1001\"\r\n}",
            Models\CadastrarCategoriaRequest::class
        );

        // Perform API call
        try {
            self::$controller->cadastrarCategoria($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testAtualizarCategoria()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"descricao\": \"Catgoria Teste\",\r\n  \"codigo_pai\": \"16\"\r\n}",
            Models\AtualizarCategoriaRequest::class
        );

        // Perform API call
        try {
            self::$controller->atualizarCategoria($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testExcluirCategoria()
    {
        // Perform API call
        try {
            self::$controller->excluirCategoria();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testListarACategoriasCadastradas()
    {
        // Perform API call
        try {
            self::$controller->listarACategoriasCadastradas();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testConsultaCategorias()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->consultaCategorias();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Set-Cookie'] = ['PHPSESSID=4s99shnf2nl2aqqb8u3krar9ii; path=/', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 16:36:46 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9999', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"categorias\": [\r\n    {\r\n      \"campanha\": \"6\",\r\n      \"nom" .
                "e\": \"Abraçadeiras\",\r\n      \"quantidade\": \"0\"\r\n    }\r\n  ],\r\n  \"b" .
                "rindes\": [\r\n    {\r\n      \"campanha\": \"6\",\r\n      \"sku\": \"123136\"" .
                ",\r\n      \"nome\": \"Macaco Hidráulico Jacaré 2Ton J2301 Bovenau - Com Maleta" .
                "\"\r\n    },\r\n    {\r\n      \"campanha\": \"6\",\r\n      \"sku\": \"137498" .
                "\",\r\n      \"nome\": \"VULCANIZADORA PARA CÂMARAS DE AUTOMÓVEIS/CAMINHÕES 110" .
                "V V300C EMEB\"\r\n    },\r\n    {\r\n      \"campanha\": \"6\",\r\n      \"sku" .
                "\": \"OLD_1007\",\r\n      \"nome\": \"TORQUES ARMADOR 12\\\" FAMASTIL\"\r\n   " .
                " }\r\n  ]\r\n}"
            )))
            ->assert();
    }

    public function testCadastraCategorias()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"tipo\": 1,\r\n  \"valorTotal\": \"20\",\r\n  \"categorias\": [\r\n    {\r" .
            "\n      \"id\": \"18\",\r\n      \"quantidade\": \"1\"\r\n    },\r\n    {\r\n      " .
            "\"id\": \"19\",\r\n      \"quantidade\": \"2\"\r\n    }\r\n  ],\r\n  \"brindes\": [" .
            "\r\n    {\r\n      \"sku\": \"867597\"\r\n    }\r\n  ]\r\n}",
            Models\CadastraCategoriasRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->cadastraCategorias($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 16:46:04 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9998', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"Categorias cadastradas com sucesso\",\r\n  \"responseCod" .
                "e\": \"200\"\r\n}"
            )))
            ->assert();
    }

    public function testDeletarCategorias()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"categorias\": [\r\n    {\r\n      \"id\": \"18\"\r\n    },\r\n    {\r\n  " .
            "    \"id\": \"19\"\r\n    }\r\n  ],\r\n  \"brindes\": [\r\n    {\r\n      \"sku\": " .
            "\"913820\"\r\n    }\r\n  ]\r\n}",
            Models\DeletarCategoriasRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deletarCategorias($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Server'] = ['nginx/1.19.1', false];
        $headers['Transfer-Encoding'] = ['chunked', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['X-Powered-By'] = ['PHP/7.2.34', false];
        $headers['Expires'] = ['Thu, 19 Nov 1981 08:52:00 GMT', false];
        $headers['Cache-Control'] = ['no-store, no-cache, must-revalidate', false];
        $headers['Pragma'] = ['no-cache', false];
        $headers['Date'] = ['Wed, 18 Jan 2023 17:04:09 GMT', false];
        $headers['X-RateLimit-Limit'] = ['10000', false];
        $headers['X-RateLimit-Remaining'] = ['9999', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"message\": \"categorias deletadas com sucesso\",\r\n  \"responseCode" .
                "\": \"200\"\r\n}"
            )))
            ->assert();
    }
}
